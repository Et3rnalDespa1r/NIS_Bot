import asyncio
import asyncpg
import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import (
    Message,
    BotCommand,
    ReplyKeyboardMarkup,
    KeyboardButton,
    FSInputFile,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.filters import Command
from config import BOT_TOKEN, DB_CONFIG  # –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
from parser import periodic_parser  # –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î
db_pool = None


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î
async def connect_db():
    global db_pool
    if db_pool is None:
        db_pool = await asyncpg.create_pool(**DB_CONFIG)


# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
async def set_main_menu():
    commands = [BotCommand(command="/menu", description="üìú –ú–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞")]
    await bot.set_my_commands(commands)


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)
def get_main_menu_keyboard() -> ReplyKeyboardMarkup:
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìú –ú–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞")],
            [KeyboardButton(text="‚ÑπÔ∏è –û —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ")],
        ],
        resize_keyboard=True,
    )
    return keyboard


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ (reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)
async def get_categories_keyboard() -> ReplyKeyboardMarkup:
    async with db_pool.acquire() as db:
        categories = await db.fetch("SELECT DISTINCT category FROM menu_items")
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=cat["category"])] for cat in categories],
        resize_keyboard=True,
    )
    return keyboard


# –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –±–ª—é–¥–∞–º–∏
async def get_dishes_inline_keyboard(category: str) -> InlineKeyboardMarkup:
    async with db_pool.acquire() as db:
        rows = await db.fetch("SELECT id, name FROM menu_items WHERE category = $1", category)

    buttons = [[InlineKeyboardButton(text=row["name"], callback_data=f"dish:{row['id']}")] for row in rows]
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_categories")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_command(message: Message):
    keyboard = get_main_menu_keyboard()
    await message.answer("‚òï –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Coffeemania! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üìú –ú–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞"
@dp.message(lambda msg: msg.text == "üìú –ú–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞")
async def menu_command(message: Message):
    keyboard = await get_categories_keyboard()
    await message.answer("üìú –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚ÑπÔ∏è –û —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ"
@dp.message(lambda msg: msg.text == "‚ÑπÔ∏è –û —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ")
async def about_restaurant(message: Message):
    response = (
        "–ö–æ—Ñ–µ–º–∞–Ω–∏—è ‚Äî —ç—Ç–æ 20 –ª–µ—Ç —É—é—Ç–∞, –≤–∫—É—Å–∞ –∏ –∑–∞–±–æ—Ç—ã. "
        "–° 2001 –≥–æ–¥–∞ –º—ã —Å–æ–∑–¥–∞–µ–º –∞—Ç–º–æ—Å—Ñ–µ—Ä—É, –≥–¥–µ —Å–æ—á–µ—Ç–∞—é—Ç—Å—è –ª—É—á—à–∏–µ —Ç—Ä–∞–¥–∏—Ü–∏–∏ –∫–æ—Ñ–µ–π–Ω–∏ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –≤—ã—Å–æ–∫–æ–π –∫—É—Ö–Ω–∏. "
    )
    await message.answer(response)


# –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–ª—é–¥–µ
async def send_dish_info(message: Message, dish_record):
    dish_text = (
        f"üçΩ *{dish_record['name']}*\n"
        f"üí∞ –¶–µ–Ω–∞: {dish_record['price']}\n"
        f"üî• –ö–∞–ª–æ—Ä–∏–∏: {dish_record.get('calories', 'N/A')} –∫–∫–∞–ª\n"
        f"ü•© –ë–µ–ª–∫–∏: {dish_record.get('proteins', 'N/A')}\n"
        f"ü•ë –ñ–∏—Ä—ã: {dish_record.get('fats', 'N/A')}\n"
        f"üçû –£–≥–ª–µ–≤–æ–¥—ã: {dish_record.get('carbohydrates', 'N/A')}\n"
        f"‚öñÔ∏è –í–µ—Å: {dish_record.get('weight', 'N/A')}\n\n"
        f"üìñ *–û–ø–∏—Å–∞–Ω–∏–µ:*\n{dish_record['description'][:1000]}"
    )
    photo_path = dish_record["image_url"]

    if os.path.exists(photo_path) and os.path.isfile(photo_path):
        photo = FSInputFile(photo_path)
        await message.answer_photo(photo=photo, caption=dish_text, parse_mode="Markdown")
    else:
        await message.answer(dish_text, parse_mode="Markdown")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.message()
async def handle_category_selection(message: Message):
    category = message.text
    async with db_pool.acquire() as db:
        dishes = await db.fetch("SELECT id, name FROM menu_items WHERE category = $1", category)

    if not dishes:
        await message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    inline_kb = await get_dishes_inline_keyboard(category)
    await message.answer(f"üçΩ –ú–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{category}*:", reply_markup=inline_kb, parse_mode="Markdown")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –±–ª—é–¥–∞
@dp.callback_query(lambda c: c.data.startswith("dish:"))
async def dish_callback_handler(callback: types.CallbackQuery):
    dish_id = int(callback.data.split(":")[1])
    async with db_pool.acquire() as db:
        dish = await db.fetchrow("SELECT * FROM menu_items WHERE id = $1", dish_id)

    if dish:
        await send_dish_info(callback.message, dish)
    else:
        await callback.message.answer("‚ùå –ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    await callback.answer()


# –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
@dp.callback_query(lambda c: c.data == "back_to_categories")
async def back_callback_handler(callback: types.CallbackQuery):
    keyboard = await get_categories_keyboard()
    await callback.message.answer("üìú –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)
    await callback.answer()


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def start_bot():
    await connect_db()
    await set_main_menu()
    await dp.start_polling(bot)


# –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –∏ –±–æ—Ç–∞
async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(periodic_parser())
    await start_bot()


if __name__ == "__main__":
    asyncio.run(main())